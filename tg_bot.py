import subprocess
import telebot
from telebot import types
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import json
import os

API_TOKEN = '7069278495:AAGdtf2xPht9rCScyDUJqUYBvEMr2YpSsTo'
bot = telebot.TeleBot(API_TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = 'users.txt'
BALANCE_FILE = 'balance.txt'
SUBSCRIPTION_FILE = 'subscriptions.txt'
FREE_SUBS_FILE = 'free_subs.txt'
DATA_FILE = 'data.txt'
MESSAGES_SENT_FILE = 'messages_sent.txt'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –¥–∞–Ω–Ω—ã—Ö
data_queue = []


# –ß—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def read_users():
    users = {}
    try:
        with open(USERS_FILE, 'r') as file:
            for line in file:
                user_id, phone_number = line.strip().split(':')
                users[user_id] = phone_number
    except FileNotFoundError:
        pass
    return users


# –ß—Ç–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤
def read_balances():
    balances = {}
    try:
        with open(BALANCE_FILE, 'r') as file:
            for line in file:
                user_id, balance = line.strip().split(':')
                balances[user_id] = float(balance)
    except FileNotFoundError:
        pass
    return balances


# –ß—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
def read_subscriptions():
    try:
        with open(SUBSCRIPTION_FILE, 'r') as file:
            subscriptions = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        subscriptions = {}
    return subscriptions


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
def save_subscriptions(subscriptions):
    with open(SUBSCRIPTION_FILE, 'w') as file:
        json.dump(subscriptions, file, indent=4)


# –ß—Ç–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
def read_free_subs():
    try:
        with open(FREE_SUBS_FILE, 'r') as file:
            free_subs = set(line.strip() for line in file)
    except FileNotFoundError:
        free_subs = set()
    return free_subs


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
def save_free_sub(user_id):
    with open(FREE_SUBS_FILE, 'a') as file:
        file.write(f"{user_id}\n")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
def update_subscriptions(subscriptions):
    updated = False
    current_time = datetime.now()
    expired_users = []

    for user_id, sub_info in subscriptions.items():
        expiry_date = datetime.strptime(sub_info['subscription']['end'], '%Y-%m-%d %H:%M:%S')
        if current_time > expiry_date:
            expired_users.append(user_id)

    for user_id in expired_users:
        del subscriptions[user_id]
        updated = True

    if updated:
        save_subscriptions(subscriptions)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
users = read_users()
balances = read_balances()
subscriptions = read_subscriptions()
free_subs = read_free_subs()
update_subscriptions(subscriptions)


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    if user_id in users:
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.", reply_markup=main_menu_markup())
    else:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        button_phone = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        markup.add(button_phone)
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                         reply_markup=markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_markup():
    markup = types.InlineKeyboardMarkup()
    button_spam = types.InlineKeyboardButton(text="üì± –ù–∞—á–∞—Ç—å —Å–ø–∞–º", callback_data="start_spam")
    button_account = types.InlineKeyboardButton(text="‚öôÔ∏è –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="my_account")
    markup.add(button_spam)
    markup.add(button_account)
    return markup


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
def contact(message):
    if message.contact is not None:
        user_id = str(message.from_user.id)
        phone_number = message.contact.phone_number
        users[user_id] = phone_number
        with open(USERS_FILE, 'a') as file:
            file.write(f"{user_id}:{phone_number}\n")
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.", reply_markup=main_menu_markup())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞—á–∞—Ç—å —Å–ø–∞–º
@bot.callback_query_handler(func=lambda call: call.data == "start_spam")
def start_spam(call):
    bot.send_message(call.message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ @–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    bot.register_next_step_handler(call.message, get_chat_id)


def get_chat_id(message):
    chat_id = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
    bot.register_next_step_handler(message, get_message, chat_id)


def get_message(message, chat_id):
    spam_message = message.text
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
    bot.register_next_step_handler(message, get_count, chat_id, spam_message)


def read_messages_sent():
    messages_sent = {}
    try:
        with open(MESSAGES_SENT_FILE, 'r') as file:
            for line in file:
                user_id, sent = line.strip().split(':')
                messages_sent[user_id] = int(sent)
    except FileNotFoundError:
        pass
    return messages_sent

def save_messages_sent(user_id, count):
    messages_sent = read_messages_sent()
    messages_sent[user_id] = messages_sent.get(user_id, 0) + count
    with open(MESSAGES_SENT_FILE, 'w') as file:
        for uid, sent in messages_sent.items():
            file.write(f"{uid}:{sent}\n")

def get_message_limit(subscription_type):
    if subscription_type == "Admin":
        return float('inf')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –¥–ª—è –ê–¥–º–∏–Ω–∞
    elif subscription_type == "Pro":
        return 100
    elif subscription_type == "Free":
        return 20
    return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def check_message_limit(user_id, count):
    subscription_info = subscriptions.get(user_id, {"subscription": {"type": "None"}})
    subscription_type = subscription_info["subscription"]["type"]
    limit = get_message_limit(subscription_type)

    if limit == float('inf'):
        return True

    sent_today = read_messages_sent().get(user_id, 0)
    remaining_limit = limit - sent_today

    return remaining_limit >= count

# –ò–∑–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def get_count(message, chat_id, spam_message):
    try:
        count = int(message.text)
        user_id = str(message.from_user.id)

        if not check_message_limit(user_id, count):
            bot.send_message(message.chat.id, "–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        save_messages_sent(user_id, count)

        # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –∏–∑ —Ñ–∞–π–ª–∞
        with open(DATA_FILE, 'r') as file:
            lines = file.readlines()

        if not lines:
            queue_number = 0
        else:
            last_line = lines[-1]
            last_queue_number = int(last_line.split('|')[0])
            queue_number = last_queue_number + 1

        data_queue.append(f"{queue_number}|{user_id}|{chat_id}|{spam_message}|{count}")
        with open(DATA_FILE, 'a') as file:
            file.write(f"{queue_number}|{user_id}|{chat_id}|{spam_message}|{count}\n")

        bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {count} —Ä–∞–∑ –≤ —á–∞—Ç {chat_id}.")
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.", reply_markup=main_menu_markup())

        # –ó–∞–ø—É—Å–∫ main.py
        subprocess.Popen(["python", "main.py"])

    except ValueError:
        bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, get_count, chat_id, spam_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç
@bot.callback_query_handler(func=lambda call: call.data == "my_account")
def my_account(call):
    user_id = str(call.from_user.id)
    phone_number = users.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    masked_phone = phone_number[:-4] + "****"
    balance = balances.get(user_id, 0.0)

    subscription_info = subscriptions.get(user_id, {"subscription": {"type": "None", "end": "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}})
    subscription_type = subscription_info["subscription"]["type"]
    expiry_date = subscription_info["subscription"]["end"]

    if subscription_type == "Admin":
        message_text = (f"üëÅ‚Äçüó® ID: {user_id}\n"
                        f"üëÅ‚Äçüó® –¢–µ–ª–µ—Ñ–æ–Ω: {masked_phone}\n\n"
                        f"üí∂ –ú–æ–π –∫–æ—à–µ–ª—ë–∫: {balance}‚ÇΩ\n"
                        f"üíé –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expiry_date}\n"
                        f"‚öôÔ∏è –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n")
    else:
        daily_limit = get_message_limit(subscription_type)
        sent_today = read_messages_sent().get(user_id, 0)
        remaining_limit = daily_limit - sent_today

        message_text = (f"üëÅ‚Äçüó® ID: {user_id}\n"
                        f"üëÅ‚Äçüó® –¢–µ–ª–µ—Ñ–æ–Ω: {masked_phone}\n\n"
                        f"üí∂ –ú–æ–π –∫–æ—à–µ–ª—ë–∫: {balance}‚ÇΩ\n"
                        f"üíé –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expiry_date}\n"
                        f"‚öôÔ∏è –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining_limit}/{daily_limit}\n")

    markup = types.InlineKeyboardMarkup()
    button_subscription = types.InlineKeyboardButton(text="üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="manage_subscription")
    button_top_up = types.InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å", callback_data="top_up")
    button_back = types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_from_account")
    markup.add(button_subscription)
    markup.add(button_top_up)
    markup.add(button_back)

    if subscription_type == "Admin":
        button_give_subscription = types.InlineKeyboardButton(text="üîß –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="give_subscription")
        button_remove_subscription = types.InlineKeyboardButton(text="üõë –°–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="remove_subscription")
        button_balance = types.InlineKeyboardButton(text="üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        markup.add(button_give_subscription)
        markup.add(button_remove_subscription)
        markup.add(button_balance)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É

    bot.send_message(call.message.chat.id, message_text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "balance")
def balance(call):
    user_id = str(call.from_user.id)
    if subscriptions.get(user_id, {"subscription": {"type": "None"}})["subscription"]["type"] != "Admin":
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
    bot.register_next_step_handler(call.message, get_user_id_for_balance)


def get_user_id_for_balance(message):
    user_id_to_update = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
    bot.register_next_step_handler(message, get_balance_amount, user_id_to_update)


def get_balance_amount(message, user_id_to_update):
    try:
        amount = float(message.text)
        if amount <= 0:
            bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id_to_update in balances:
            balances[user_id_to_update] += amount
        else:
            balances[user_id_to_update] = amount

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        with open(BALANCE_FILE, 'w') as file:
            for uid, bal in balances.items():
                file.write(f"{uid}:{bal}\n")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_update} –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ.")
        bot.send_message(user_id_to_update, f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ.")

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        bot.register_next_step_handler(message, get_balance_amount, user_id_to_update)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é "–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç"
@bot.callback_query_handler(func=lambda call: call.data == "back_from_account")
def back_from_account(call):
    bot.send_message(call.message.chat.id, "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
                     reply_markup=main_menu_markup())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
@bot.callback_query_handler(func=lambda call: call.data == "manage_subscription")
def manage_subscription(call):
    user_id = str(call.from_user.id)
    markup = types.InlineKeyboardMarkup()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ Free
    activated_free_subs = read_free_subs()

    if user_id not in activated_free_subs:
        button_free = types.InlineKeyboardButton(text="‚úÖ Free", callback_data="activate_free_subscription")
    else:
        button_free = types.InlineKeyboardButton(text="‚úÖ Free (—É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å)",
                                                 callback_data="free_subscription_already_activated")

    button_pro = types.InlineKeyboardButton(text="üë§ Pro", callback_data="choose_pro_subscription")
    button_back = types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_account")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    markup.add(button_free)
    markup.add(button_pro)
    markup.add(button_back)

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
@bot.callback_query_handler(func=lambda call: call.data == "activate_free_subscription")
def activate_free_subscription(call):
    user_id = str(call.from_user.id)
    activated_free_subs = read_free_subs()

    if user_id in activated_free_subs:
        bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    expiry_date = datetime.now() + timedelta(days=3)
    formatted_end_date = expiry_date.strftime('%Y-%m-%d %H:%M:%S')

    subscriptions[user_id] = {
        "subscription": {
            "type": "Free",
            "end": formatted_end_date
        }
    }
    save_subscriptions(subscriptions)
    save_free_sub(user_id)

    bot.send_message(call.message.chat.id, f"–í–∞–º –≤—ã–¥–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –¥–Ω—è –¥–æ {formatted_end_date}.")
    bot.send_message(user_id, f"–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {formatted_end_date}.")

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=my_account())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É Pro
@bot.callback_query_handler(func=lambda call: call.data == "choose_pro_subscription")
def choose_pro_subscription(call):
    user_id = str(call.from_user.id)
    if user_id in subscriptions and subscriptions[user_id]['subscription']['type'] != "None":
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        return

    markup = types.InlineKeyboardMarkup()
    button_week = types.InlineKeyboardButton(text="–ù–∞ 1 –Ω–µ–¥–µ–ª—é - 30‚ÇΩ", callback_data="pro_week")
    button_month = types.InlineKeyboardButton(text="–ù–∞ 1 –º–µ—Å—è—Ü - 120‚ÇΩ", callback_data="pro_month")
    button_halfyear = types.InlineKeyboardButton(text="–ù–∞ 6 –º–µ—Å—è—Ü–µ–≤ - 720‚ÇΩ", callback_data="pro_halfyear")
    button_back = types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_account")

    markup.add(button_week)
    markup.add(button_month)
    markup.add(button_halfyear)
    markup.add(button_back)

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Pro
@bot.callback_query_handler(func=lambda call: call.data.startswith("pro_"))
def choose_pro_period(call):
    period = call.data.split("_")[1]  # –û–∂–∏–¥–∞–µ–º 'week', 'month', 'half_year'
    print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {period}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

    prices = {"week": 30, "month": 120, "halfyear": 720}
    duration = {"week": 7, "month": 30, "halfyear": 180}
    period_names = {"week": "–Ω–µ–¥–µ–ª—è", "month": "–º–µ—Å—è—Ü", "halfyear": "6 –º–µ—Å—è—Ü–µ–≤"}

    user_id = str(call.from_user.id)
    balance = balances.get(user_id, 0.0)
    price = prices.get(period)
    days = duration.get(period)

    if price is None or days is None:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–ø–∏—Å–∫–∏. - –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {period}")
        return

    if balance < price:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        return

    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    balances[user_id] -= price
    with open(BALANCE_FILE, 'w') as file:
        for uid, bal in balances.items():
            file.write(f"{uid}:{bal}\n")

    expiry_date = datetime.now() + timedelta(days=days)
    formatted_end_date = expiry_date.strftime('%Y-%m-%d %H:%M:%S')

    subscriptions[user_id] = {
        "subscription": {
            "type": "Pro",
            "end": formatted_end_date
        }
    }
    save_subscriptions(subscriptions)

    period_russian = period_names.get(period, period)  # –ü–µ—Ä–µ–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    bot.send_message(call.message.chat.id,
                     f"–í—ã –∫—É–ø–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É Pro –Ω–∞ {period_russian}. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {formatted_end_date}.")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    my_account(call)

period_names = {
    "week": "–Ω–µ–¥–µ–ª—è",
    "month": "–º–µ—Å—è—Ü",
    "halfyear": "6 –º–µ—Å—è—Ü–µ–≤"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
@bot.callback_query_handler(func=lambda call: call.data == "give_subscription")
def give_subscription(call):
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=subscription_types_markup())


def my_account_markup():
    markup = types.InlineKeyboardMarkup()
    button_subscription = types.InlineKeyboardButton(text="üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="manage_subscription")
    button_top_up = types.InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up")
    button_back = types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_account")
    markup.add(button_subscription)
    markup.add(button_top_up)
    markup.add(button_back)

    return markup

def reset_daily_limits():
    # –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ø–æ –ú–°–ö
    current_time = datetime.now()
    if current_time.hour == 0 and current_time.minute == 0:
        with open(MESSAGES_SENT_FILE, 'w') as file:
            pass  # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

def subscription_types_markup():
    markup = types.InlineKeyboardMarkup()
    button_admin = types.InlineKeyboardButton(text="Admin", callback_data="subscription_Admin")
    button_pro = types.InlineKeyboardButton(text="Pro", callback_data="subscription_Pro")
    button_free = types.InlineKeyboardButton(text="Free", callback_data="subscription_Free")
    button_back = types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_account")
    markup.add(button_admin, button_pro, button_free)
    markup.add(button_back)
    return markup


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("subscription_"))
def choose_subscription(call):
    subscription_type = call.data.split("_")[1]
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")
    bot.register_next_step_handler(call.message, get_user_id_to_give, subscription_type)


# –í–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def get_user_id_to_give(message, subscription_type):
    user_id_to_give = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –≤–∏–¥–µ y-–≥–æ–¥ m-–º–µ—Å—è—Ü d-–¥–Ω–∏ h-—á–∞—Å–æ–≤ m-–º–∏–Ω—É—Ç).")
    bot.register_next_step_handler(message, get_subscription_duration, user_id_to_give, subscription_type)


# –í–≤–æ–¥ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
def get_subscription_duration(message, user_id_to_give, subscription_type):
    duration = message.text.strip()
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        years, months, days, hours, minutes = 0, 0, 0, 0, 0

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–µ–ª –∏ –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏
        import re
        duration_parts = re.findall(r'(\d+)([ymdHM])', duration)

        for number, unit in duration_parts:
            number = int(number)
            if unit == 'y':
                years = number
            elif unit == 'm':
                months = number
            elif unit == 'd':
                days = number
            elif unit == 'h':
                hours = number
            elif unit == 'M':
                minutes = number

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        expiry_date = datetime.now() + relativedelta(years=years, months=months, days=days, hours=hours,
                                                     minutes=minutes)
        formatted_end_date = expiry_date.strftime('%Y-%m-%d %H:%M:%S')

        if subscription_type not in ["Admin", "Pro", "Free"]:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscriptions[user_id_to_give] = {
            "subscription": {
                "type": subscription_type,
                "end": formatted_end_date
            }
        }
        save_subscriptions(subscriptions)

        bot.send_message(message.chat.id,
                         f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_type} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_give} –¥–æ {formatted_end_date}.")
        bot.send_message(user_id_to_give, f"–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {subscription_type} –¥–æ {formatted_end_date}.")

    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, get_subscription_duration, user_id_to_give, subscription_type)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    my_account(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –°–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
@bot.callback_query_handler(func=lambda call: call.data == "remove_subscription")
def remove_subscription(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")
    bot.register_next_step_handler(call.message, get_user_id_to_remove)


# –í–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
def get_user_id_to_remove(message):
    user_id_to_remove = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–Ω—è—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
    bot.register_next_step_handler(message, remove_subscription_reason, user_id_to_remove)


# –í–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã —Å–Ω—è—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
def remove_subscription_reason(message, user_id_to_remove):
    reason = message.text
    if user_id_to_remove in subscriptions:
        del subscriptions[user_id_to_remove]
        save_subscriptions(subscriptions)
        bot.send_message(message.chat.id,
                         f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_remove} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}.")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id_to_remove, f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: {reason}.")
    else:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    my_account(message)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def subscription_types_markup():
    markup = types.InlineKeyboardMarkup()
    button_admin = types.InlineKeyboardButton(text="Admin", callback_data="subscription_Admin")
    button_pro = types.InlineKeyboardButton(text="Pro", callback_data="subscription_Pro")
    button_free = types.InlineKeyboardButton(text="Free", callback_data="subscription_Free")
    button_back = types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_account")
    markup.add(button_admin, button_pro, button_free)
    markup.add(button_back)
    return markup


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é "–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@bot.callback_query_handler(func=lambda call: call.data == "my_account")
def back_from_manage_subscription(call):
    my_account(call)

# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–∑–æ–≤–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –≥–¥–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ call
def some_other_function(message):
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    my_account(message)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ message –∏–º–µ–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ chat.id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–ø–æ–ª–Ω–∏—Ç—å
@bot.callback_query_handler(func=lambda call: call.data == "top_up")
def top_up(call):
    bot.send_message(call.message.chat.id, "–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞.")

def get_top_up_amount(message):
    try:
        amount = float(message.text)
        user_id = str(message.from_user.id)

        if user_id in balances:
            balances[user_id] += amount
        else:
            balances[user_id] = amount

        with open(BALANCE_FILE, 'w') as file:
            for uid, balance in balances.items():
                file.write(f"{uid}:{balance}\n")

        bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balances[user_id]}‚ÇΩ")
    except ValueError:
        bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, get_top_up_amount)


def notify_users():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as file:
            lines = file.readlines()

        for line in lines:
            queue_number, user_id, chat_id, spam_message, count = line.strip().split('|')
            if int(queue_number) == 0:
                bot.send_message(user_id, "–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å 0, —Å–ø–∞–º –±—ã–ª –Ω–∞—á–∞—Ç.")


if __name__ == '__main__':
    save_subscriptions(subscriptions)

    reset_daily_limits()

    notify_users()

    bot.infinity_polling()
